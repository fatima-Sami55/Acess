<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Acess</title>
     <link rel="icon" type="image/png" href="/image/Acess%20logo/logo.png?v=1.0" />
  </head>
  <body>
<!-- Stylesheets -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC"
      crossorigin="anonymous"
    />
    <link href="/css/edit.css" rel="stylesheet" type="text/css" />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/icon?family=Material+Icons"
    />
    <link
      rel="stylesheet"
      href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css"
    />

<!-- Navbar -->
    <%- include('../../partials/navbar', { page: page }) %>
<!-- Edit form -->
   <div class="container-fluid bg-light py-5">
    <div class="text-center mb-4">
      <div class="btn-group">
        <button id="accountBtn" class="btn btn-dark">Account setup</button>
        <button id="billingBtn" class="btn btn-light text-dark border-dark" disabled>Billing address</button>
      </div>
    </div>

    <div class="row justify-content-center">
      <div class="col-12 col-md-8 col-lg-6">
        <!-- Form 1 -->
        <div id="loginForm" class="card shadow-lg mb-4">
          <div class="card-body">
            <form id="form1" class="row g-3 needs-validation" enctype="multipart/form-data" novalidate>
              <div class="col-md-6">
                <label class="form-label">First Name</label>
                <input name="firstname" type="text" class="form-control" value="<%=data.firstname%>" required />
                <div class="invalid-feedback">First name must contain only letters.</div>
              </div>
              <div class="col-md-6">
                <label class="form-label">Last Name</label>
                <input name="lastname" type="text" class="form-control" value="<%=data.lastname%>" required />
                <div class="invalid-feedback">Last name must contain only letters.</div>
              </div>
              <div class="col-md-6">
                <label class="form-label">Email</label>
                <input name="email" type="email" class="form-control" value="<%=data.email%>" required />
                <div class="invalid-feedback">Please enter a valid email address.</div>
              </div>
              <div class="col-md-6">
                <label class="form-label">Password</label>
                <input name="Pass" type="password" class="form-control" id="inputPassword4" required />
                <div class="invalid-feedback">Password must be 8–12 chars, include uppercase, lowercase, number and symbol.</div>
              </div>
              <div class="mb-3">
                <label class="form-label">Choose Profile Image</label>
                <input name="img" class="form-control" type="file" required />
                <div class="invalid-feedback">Profile image is required.</div>
              </div>
              <div class="col-12 text-center">
                <button type="submit" id="nextButton" class="btn btn-dark w-100" disabled>Next</button>
              </div>
            </form>
          </div>
        </div>

        <!-- Form 2 -->
        <div id="signupForm" class="card shadow-lg" style="display: none;">
          <div class="card-body">
            <form id="form2" class="row g-3 needs-validation" enctype="multipart/form-data" novalidate>
              <div class="col-12">
                <label class="form-label">Address</label>
                <input name="address" type="text" class="form-control" value="<%=data.address%>" required />
                <div class="invalid-feedback">Address must be at least 13 characters long.</div>
              </div>
              <div class="col-12">
                <label class="form-label">Phone Number</label>
                <input name="phone" type="text" class="form-control" value="<%=data.phone%>" required />
                <div class="invalid-feedback">Phone number must be 11 digits.</div>
              </div>
              <div class="col-md-6">
                <label class="form-label">City</label>
                <input name="city" type="text" class="form-control" value="<%=data.city%>" required />
                <div class="invalid-feedback">City must be 5–15 alphabetic characters.</div>
              </div>
              <div class="col-md-4">
                <label class="form-label">Province</label>
                <select name="province" class="form-select" required>
                  <option disabled value="">Choose...</option>
                  <option value="Punjab" <%= data.province === 'Punjab' ? 'selected' : '' %>>Punjab</option>
                  <option value="Sindh" <%= data.province === 'Sindh' ? 'selected' : '' %>>Sindh</option>
                  <option value="Kpk" <%= data.province === 'Kpk' ? 'selected' : '' %>>Kpk</option>
                  <option value="Blochistan" <%= data.province === 'Blochistan' ? 'selected' : '' %>>Blochistan</option>
                </select>
                <div class="invalid-feedback">Please select a province.</div>
              </div>
              <div class="col-md-2">
                <label class="form-label">Zip</label>
                <input name="zip" type="text" class="form-control" value="<%=data.zip%>" required />
                <div class="invalid-feedback">Zip code must be 4 digits.</div>
              </div>
              <div class="col-12 text-center">
                <button type="submit" class="btn btn-dark w-100">Edit Account</button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>

</body>

<!-- Scripts -->

  <script>
    (function () {
      "use strict";

      const form1 = document.getElementById("form1");
      const form2 = document.getElementById("form2");
      const nextButton = document.getElementById("nextButton");
      const accountBtn = document.getElementById("accountBtn");
      const billingBtn = document.getElementById("billingBtn");
      const loginForm = document.getElementById("loginForm");
      const signupForm = document.getElementById("signupForm");

      const setError = (input, msg) => {
        input.classList.add("is-invalid");
        input.classList.remove("is-valid");
        input.setCustomValidity(msg);
      };

      const clearError = (input) => {
        input.classList.remove("is-invalid");
        input.classList.add("is-valid");
        input.setCustomValidity("");
      };

      const validateForm1 = () => {
         const nameRegex = /^[A-Za-z]+$/;
  const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^A-Za-z\d]).{8,12}$/;
        let valid = true;
    const firstname = form1.firstname;
    const lastname = form1.lastname;
    const password = form1.Pass;
    const email = form1.email;
    const img = form1.img;

    [firstname, lastname, password, email, img].forEach(input => input.classList.remove("is-invalid"));

    if (!nameRegex.test(firstname.value.trim())) {
      firstname.classList.add("is-invalid");
      valid = false;
    }

    if (!nameRegex.test(lastname.value.trim())) {
      lastname.classList.add("is-invalid");
      valid = false;
    }

    if (!passwordRegex.test(password.value.trim())) {
      password.classList.add("is-invalid");
      valid = false;
    }

    if (!email.value.trim() || !email.checkValidity()) {
      email.classList.add("is-invalid");
      valid = false;
    }

    if (!img.files || img.files.length === 0) {
      img.classList.add("is-invalid");
      valid = false;
    }

    return valid;
      };

      const validateForm2 = () => {
        let valid = true;
        const phoneRegex = /^\d{11}$/;
        const zipRegex = /^\d{4}$/;
        const cityRegex = /^[A-Za-z]{5,15}$/;

        const address = form2.address;
        const phone = form2.phone;
        const city = form2.city;
        const zip = form2.zip;
        const province = form2.province;

        address.value.trim().length < 13 ? (setError(address, "Address too short"), valid = false) : clearError(address);
        !phoneRegex.test(phone.value.trim()) ? (setError(phone, "Phone must be 11 digits"), valid = false) : clearError(phone);
        !zipRegex.test(zip.value.trim()) ? (setError(zip, "Zip must be 4 digits"), valid = false) : clearError(zip);
        !cityRegex.test(city.value.trim()) ? (setError(city, "Invalid city name"), valid = false) : clearError(city);
        !province.value ? (setError(province, "Select province"), valid = false) : clearError(province);

        return valid;
      };

      form1.querySelectorAll("input").forEach((input) => {
        input.addEventListener("input", () => {
          validateForm1();
          checkForm1State();
        });
      });

      nextButton.disabled = true;
      billingBtn.disabled = true;

      function checkForm1State() {
        const isValid = validateForm1();
        nextButton.disabled = !isValid;
        billingBtn.disabled = !isValid;
      }

      [form1, form2].forEach((form) => {
        form.addEventListener("submit", (e) => {
          const isValid = form.id === "form1" ? validateForm1() : validateForm2();
          if (!form.checkValidity() || !isValid) {
            e.preventDefault();
            e.stopPropagation();
          }
          form.classList.add("was-validated");
        });
      });

      nextButton.addEventListener("click", function (event) {
        event.preventDefault();
        if (form1.checkValidity() && validateForm1()) {
          toggleTab(billingBtn, accountBtn);
          showBillingForm();
        }
      });

      accountBtn.addEventListener("click", () => {
        toggleTab(accountBtn, billingBtn);
        showSignupForm();
      });

      billingBtn.addEventListener("click", function (event) {
        event.preventDefault();
        if (form1.checkValidity() && validateForm1()) {
          toggleTab(billingBtn, accountBtn);
          showBillingForm();
        }
      });

      function toggleTab(activeBtn, inactiveBtn) {
        activeBtn.classList.add("btn-dark");
        inactiveBtn.classList.remove("btn-dark");
      }

      function showSignupForm() {
        loginForm.style.display = "block";
        signupForm.style.display = "none";
      }

      function showBillingForm() {
        loginForm.style.display = "none";
        signupForm.style.display = "block";
      }

      showSignupForm();
      checkForm1State();
    })();
  </script>

<script>
  // AJAX Submission for Form2 (final step)
  document.getElementById("form2").addEventListener("submit", async function (e) {
    e.preventDefault();

    const form2 = e.target;
    const form1 = document.getElementById("form1");
    
    const formData = new FormData();
    [...form1.elements, ...form2.elements].forEach((el) => {
      if (el.name && (el.type !== 'file' || el.files.length > 0)) {
        if (el.type === "file") {
          formData.append(el.name, el.files[0]);
        } else {
          formData.append(el.name, el.value.trim());
        }
      }
    });

    const submitBtn = form2.querySelector('button[type="submit"]');
    submitBtn.disabled = true;
    submitBtn.textContent = "Saving...";

    const alertBox = document.createElement("div");
    alertBox.className = "alert mt-3";
    form2.appendChild(alertBox);

    try {
      const response = await fetch("/edit-profile", {
        method: "POST",
        body: formData,
      });

      const data = await response.json();

      if (data.status === "success") {
        alertBox.classList.add("alert-success");
        alertBox.textContent = "Profile updated successfully!";
        setTimeout(() => {
          window.location.href = data.redirect;
        }, 1500);
      } else {
        alertBox.classList.add("alert-danger");
        alertBox.innerHTML = `
        <span>${data.error || "Something went wrong. Try again."}</span>
        <button type="button" class="btn-close float-end" aria-label="Close"></button>
        `;
        alertBox.querySelector(".btn-close").addEventListener("click", () => {
        alertBox.remove();
        });
        submitBtn.disabled = false;
        submitBtn.textContent = "Edit Account";
      }
    } catch (err) {
      alertBox.classList.add("alert-danger");
      alertBox.innerHTML = `
        <span>${data.error || "Network error. Please try again later."}</span>
        <button type="button" class="btn-close float-end" aria-label="Close"></button>
        `;
        alertBox.querySelector(".btn-close").addEventListener("click", () => {
        alertBox.remove();
        });
      submitBtn.disabled = false;
      submitBtn.textContent = "Edit Account";
    }
  });
</script>  

  <script>
    document.addEventListener("DOMContentLoaded", function () {
    const accountBtn = document.getElementById("accountBtn");
    const billingBtn = document.getElementById("billingBtn");
    const loginForm = document.getElementById("loginForm");
    const signupForm = document.getElementById("signupForm");
    const nextButton = document.getElementById("nextButton");
    const form1 = document.getElementById("form1");
    const form2 = document.getElementById("form2");

    // Initial setup: Show loginForm, hide signupForm
    showSignupForm();

    // Event listener for Account setup button click
    accountBtn.addEventListener("click", function () {
        accountBtn.classList.add("bg-dark", "text-white");
        accountBtn.classList.remove("bg-light", "text-dark");
        billingBtn.classList.add("bg-light", "text-dark");
        billingBtn.classList.remove("bg-dark", "text-white");

        showSignupForm();
    });

    // Event listener for Billing address button click
    billingBtn.addEventListener("click", function () {
        if (form1.checkValidity()) {
            billingBtn.classList.add("bg-dark", "text-white");
            billingBtn.classList.remove("bg-light", "text-dark");
            accountBtn.classList.add("bg-light", "text-dark");
            accountBtn.classList.remove("bg-dark", "text-white");
            showBillingForm(); // Proceed to the billing form
        } else {
            event.preventDefault(); // Prevent default form submission
            event.stopPropagation(); // Stop event propagation to avoid automatic validation UI
            form1.classList.add("was-validated"); // Add Bootstrap's 'was-validated' class for validation UI
        }
    });

    // Event listener for Next button click (inside loginForm)
    nextButton.addEventListener("click", function () {
        if (form1.checkValidity()) {
            billingBtn.classList.add("bg-dark", "text-white");
            billingBtn.classList.remove("bg-light", "text-dark");
            accountBtn.classList.add("bg-light", "text-dark");
            accountBtn.classList.remove("bg-dark", "text-white");
            showBillingForm(); // Proceed to the billing form
        } else {
            event.preventDefault(); // Prevent default form submission
            event.stopPropagation(); // Stop event propagation to avoid automatic validation UI
            form1.classList.add("was-validated"); // Add Bootstrap's 'was-validated' class for validation UI
        }
    });

    // Event listener for loginForm submission
    form1.addEventListener("submit", function (event) {
        event.preventDefault(); // Prevent form submission

        // Handle login form submission logic if needed
    });

    // Event listener for signupForm submission
    form2.addEventListener("submit", function (event) {
        event.preventDefault(); // Prevent form submission

        const formData = new FormData();
        formData.append("firstname", form1.firstname.value);
        formData.append("lastname", form1.lastname.value);
        formData.append("email", form1.email.value);
        formData.append("Pass", form1.Pass.value);
        formData.append("img", form1.img.files[0]);
        formData.append("address", form2.address.value);
        formData.append("phone", form2.phone.value);
        formData.append("city", form2.city.value);
        formData.append("province", form2.province.value);
        formData.append("zip", form2.zip.value);

        

       fetch("/edit-profile", {
  method: "POST",
  body: formData,
  headers: { "Accept": "application/json" }
})
  .then(async (response) => {
    let data;
    try {
      data = await response.json();
    } catch (err) {
      const text = await response.text();
      console.error("❌ JSON Parse Error:", err, text);
      alertContainer.innerHTML = `<div class="alert alert-danger">Could not parse server response.</div>`;
      return;
    }

    alertContainer.innerHTML = "";

    if (data.error) {
      alertContainer.innerHTML = `
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
          ${data.error}
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>`;
      alertContainer.scrollIntoView({ behavior: "smooth", block: "center" });
    } else if (data.success) {
      alertContainer.innerHTML = `
        <div class="alert alert-success alert-dismissible fade show" role="alert">
          ${data.success}
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>`;
      setTimeout(() => window.location.href = "/user-profile", 1500);
    } else if (data.redirect) {
      window.location.href = data.redirect;
    } else {
      alertContainer.innerHTML = `<div class="alert alert-warning">Unexpected response.</div>`;
    }
  })
  .catch((error) => {
    console.error("🔥 Fetch error:", error);
    alertContainer.innerHTML = `
      <div class="alert alert-danger alert-dismissible fade show" role="alert">
        Something went wrong. Please try again.
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
      </div>`;
  });
  
    });

    function showSignupForm() {
        loginForm.style.display = "block";
        signupForm.style.display = "none";
    }

    function showBillingForm() {
        loginForm.style.display = "none";
        signupForm.style.display = "block";
    }
});

  </script>
</html>
